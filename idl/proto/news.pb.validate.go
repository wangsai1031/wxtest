// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: news.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendNewsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendNewsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNewsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendNewsReqMultiError, or
// nil if none found.
func (m *SendNewsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNewsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendNewsReqValidationError{
						field:  "文章列表",
						reason: "文章列表 不符合校验规范",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendNewsReqValidationError{
						field:  "文章列表",
						reason: "文章列表 不符合校验规范",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendNewsReqValidationError{
					field:  "文章列表",
					reason: "文章列表 不符合校验规范",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendNewsReqMultiError(errors)
	}

	return nil
}

// SendNewsReqMultiError is an error wrapping multiple validation errors
// returned by SendNewsReq.ValidateAll() if the designated constraints aren't met.
type SendNewsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNewsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNewsReqMultiError) AllErrors() []error { return m }

// SendNewsReqValidationError is the validation error returned by
// SendNewsReq.Validate if the designated constraints aren't met.
type SendNewsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNewsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNewsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNewsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNewsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNewsReqValidationError) ErrorName() string { return "SendNewsReqValidationError" }

// Error satisfies the builtin error interface
func (e SendNewsReqValidationError) Error() string {
	errmsg := e.Reason()

	if e.cause != nil {
		errmsg = fmt.Sprintf("%s: %s", errmsg, e.cause.Error())
	}

	return errmsg
}

var _ error = SendNewsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNewsReqValidationError{}

// Validate checks the field values on Article with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Article with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ArticleMultiError, or nil if none found.
func (m *Article) ValidateAll() error {
	return m.validate(true)
}

func (m *Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Author

	// no validation rules for Digest

	// no validation rules for Content

	// no validation rules for ContentSourceUrl

	// no validation rules for Cover

	// no validation rules for NeedOpenComment

	// no validation rules for OnlyFansCanComment

	if len(errors) > 0 {
		return ArticleMultiError(errors)
	}

	return nil
}

// ArticleMultiError is an error wrapping multiple validation errors returned
// by Article.ValidateAll() if the designated constraints aren't met.
type ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleMultiError) AllErrors() []error { return m }

// ArticleValidationError is the validation error returned by Article.Validate
// if the designated constraints aren't met.
type ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleValidationError) ErrorName() string { return "ArticleValidationError" }

// Error satisfies the builtin error interface
func (e ArticleValidationError) Error() string {
	errmsg := e.Reason()

	if e.cause != nil {
		errmsg = fmt.Sprintf("%s: %s", errmsg, e.cause.Error())
	}

	return errmsg
}

var _ error = ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleValidationError{}

// Validate checks the field values on SendNewsResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendNewsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNewsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendNewsRespMultiError, or
// nil if none found.
func (m *SendNewsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNewsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Errno

	// no validation rules for Errmsg

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendNewsRespValidationError{
						field:  "群发消息信息",
						reason: "群发消息信息 不符合校验规范",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendNewsRespValidationError{
						field:  "群发消息信息",
						reason: "群发消息信息 不符合校验规范",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendNewsRespValidationError{
					field:  "群发消息信息",
					reason: "群发消息信息 不符合校验规范",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendNewsRespMultiError(errors)
	}

	return nil
}

// SendNewsRespMultiError is an error wrapping multiple validation errors
// returned by SendNewsResp.ValidateAll() if the designated constraints aren't met.
type SendNewsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNewsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNewsRespMultiError) AllErrors() []error { return m }

// SendNewsRespValidationError is the validation error returned by
// SendNewsResp.Validate if the designated constraints aren't met.
type SendNewsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNewsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNewsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNewsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNewsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNewsRespValidationError) ErrorName() string { return "SendNewsRespValidationError" }

// Error satisfies the builtin error interface
func (e SendNewsRespValidationError) Error() string {
	errmsg := e.Reason()

	if e.cause != nil {
		errmsg = fmt.Sprintf("%s: %s", errmsg, e.cause.Error())
	}

	return errmsg
}

var _ error = SendNewsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNewsRespValidationError{}

// Validate checks the field values on SendNewsData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendNewsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNewsData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendNewsDataMultiError, or
// nil if none found.
func (m *SendNewsData) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNewsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgId

	if len(errors) > 0 {
		return SendNewsDataMultiError(errors)
	}

	return nil
}

// SendNewsDataMultiError is an error wrapping multiple validation errors
// returned by SendNewsData.ValidateAll() if the designated constraints aren't met.
type SendNewsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNewsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNewsDataMultiError) AllErrors() []error { return m }

// SendNewsDataValidationError is the validation error returned by
// SendNewsData.Validate if the designated constraints aren't met.
type SendNewsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNewsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNewsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNewsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNewsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNewsDataValidationError) ErrorName() string { return "SendNewsDataValidationError" }

// Error satisfies the builtin error interface
func (e SendNewsDataValidationError) Error() string {
	errmsg := e.Reason()

	if e.cause != nil {
		errmsg = fmt.Sprintf("%s: %s", errmsg, e.cause.Error())
	}

	return errmsg
}

var _ error = SendNewsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNewsDataValidationError{}
